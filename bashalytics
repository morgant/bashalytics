#!/bin/bash

# 
# bashalytics
# 
# A bash utility for fetching reports from Google Analytics using the Core 
# Reporting v3 API.
#
# Based on: http://adambuchanan.me/post/19993272813/google-analytics-api-bash-scripts
# 
# Reference: https://developers.google.com/analytics/devguides/reporting/core/v3/
#            https://developers.google.com/analytics/devguides/reporting/metadata/v3/
# 
# CHANGE LOG:
# 
# v0.1   - 2014-03-16 - Morgan Aldridge <morgant@makkintosshu.com>
#                       Initial development.
# 
# LICENSE:
# 
# Copyright (c) 2014, Morgan Aldridge. All rights reserved.
# 
# _TBD_
# 

shopt -s extglob

# info
tool=$(basename "$0")
version='0.1'
copyright='Copyright (c) 2014 Morgan Aldridge'
api_key='AIzaSyCvIN2JcsrCkVG6nH93GUS1omlVz1cX93Y'	# NOTE: this is specific to bashalytics and should not be used for anything else

# global variables
verbose=false
command=''
auth_token=''
auth_token_file="${HOME}/.bashalytics/auth_token"
ga_dimensions=()
ga_metrics=()
ga_dimensions_file="${HOME}/.bashalytics/dimensions"
ga_metrics_file="${HOME}/.bashalytics/metrics"
report_profile=''
report_start_date=''
report_end_date=''
report_dimensions=()
report_metrics=()
report_sort=''

# print usage instructions (help)
function usage() {
	echo "Usage: $tool [options] <command>"
	echo
	echo 'Options:'
	echo '  -h, --help      : print these usage instructions'
	echo '  -v, --verbose   : verbose output'
	echo '  -V, --version   : print the version'
	echo '  --sort          : sort report by specified dimension or metric'
	echo
	echo 'Commands:'
	echo '  auth            : authenticate to Google Analytics'
	echo '  report <profile> <start_date> <end_date> <dimension> [...] <metric> [...]'
	echo '                  : generate report for date range w/dimensions & metrics'
	echo
}

# print version info
function version() {
	echo "$tool v$version $copyright"
}

function in_array() {
	local found=false
	local value="$1"
	shift

	if [ -z "$value" ]; then $found; fi
	if [ ${#@} -lt 1 ]; then $found; fi
	for array_value in "$@"; do
		if [ "$value" = "$array_value" ]; then found=true; fi
	done

	$found
}

function is_ga_dimension() {
	local found=false
	local value="$1"
	shift

	if [ -z "$value" ]; then $found; fi
	if [ ${#@} -lt 1 ]; then $found; fi
	for array_value in "${ga_dimensions[@]}"; do
		if [[ "$array_value" =~ ^$value\| ]]; then found=true; fi
	done

	$found
}

function is_ga_metric() {
	local found=false
	local value="$1"
	shift

	if [ -z "$value" ]; then $found; fi
	if [ ${#@} -lt 1 ]; then $found; fi
	for array_value in "${ga_metrics[@]}"; do
		if [[ "$array_value" =~ ^$value\| ]]; then found=true; fi
	done

	$found
}

function load_ga_auth_token() {
	local success=true
	
	if $verbose; then echo -n "Loading auth token from '$auth_token_file'... "; fi

	# does the auth token file exist?
	if [ -f "$auth_token_file" ]; then
		local line=''
		auth_token=''
		# read in the auth token file
		IFS= read -r auth_token < "$auth_token_file"
	else
		echo "ERROR! The auth token file '${auth_token_file}' was not found!" 1>&2
		success=false
	fi
	
	if $verbose; then
		if $success; then
			echo "Done."
		else
			echo "ERROR!"
		fi
	fi
	
	$success
}

function save_ga_auth_token() {
	local success=true
	
	# create the directory, if necessary
	local auth_token_path="$(dirname "$auth_token_file")"
	if [ ! -d "$auth_token_path" ]; then
		if $verbose; then echo -n "Creating '$auth_token_path'... "; fi
		mkdir -p "$auth_token_path"
		if [[ $? -gt 0 ]]; then
			echo "ERROR! An unknown error occurred while creating '$auth_token_path'!" 1>&2
			success=false
		else
			if $verbose; then echo "Done."; fi
		fi
	fi
	
	# is the auth token empty?
	if [ -z "$auth_token" ]; then
		echo "ERROR! Can't save an empty auth token!" 1>&2
	else
		# save the auth token
		if $verbose; then echo -n "Saving auth token to '$auth_token_file'... "; fi
		echo "$auth_token" > "$auth_token_file"
		if [[ $? -gt 0 ]]; then
			echo "ERROR! An unknown error occurred while saving the auth token to '${auth_token_file}'!" 1>&2
			success=false
		else
			if $verbose; then echo "Done."; fi
		fi
		
		# set permissions
		if $verbose; then echo -n "Setting permissions on auth token file '${auth_token_file}'... "; fi
		chmod -R 700 "$auth_token_path"
		if [[ $? -gt 0 ]]; then
			echo "ERROR! An unknown error occurred while setting permissions on the auth token file '${auth_token_file}'!" 1>&2
			success=false
		else
			if $verbose; then echo "Done."; fi
		fi
	fi
	
	$success
}

function get_ga_auth_token() {
	local success=true
	local email="$1"
	local password="$2"
	
	# get the Google Analytics auth token by username & password
	local token="$(curl -s https://www.google.com/accounts/ClientLogin -s \
	  -d "Email=$email" \
	  -d "Passwd=$password" \
	  -d accountType=GOOGLE \
	  -d source=curl-accountFeed-v1 \
	  -d service=analytics \
	 | grep "Auth=" | cut -d"=" -f2)"
	 if [[ ( $? -gt 0 ) || ( -z "$token" ) ]]; then
	 	success=false
	 else
	 	auth_token="$token"
	 fi
	 
	 $success
}

function load_ga_columns() {
	local success=true
	
	# load the dimensions
	if $verbose; then echo -n "Loading Google Analytics dimensions from '$ga_dimensions_file'... "; fi
	# does the dimensions file exist?
	if [ -f "$ga_dimensions_file" ]; then
		local line=''
		# read in the dimensions file
		while IFS= read -r line || [ -n "$line" ]; do
			ga_dimensions+=("$line")
		done < "$ga_dimensions_file"
	else
		echo "ERROR! The Google Analytics dimensions file '${ga_dimensions_file}' was not found!" 1>&2
		success=false
	fi
	if $verbose; then
		if $success; then
			echo "Done."
		else
			echo "ERROR!"
		fi
	fi
	
	# load the metrics
	if $verbose; then echo -n "Loading Google Analytics metrics from '$ga_metrics_file'... "; fi
	# does the metrics file exist?
	if [ -f "$ga_metrics_file" ]; then
		local line=''
		# read in the metrics file
		while IFS= read -r line || [ -n "$line" ]; do
			ga_metrics+=("$line")
		done < "$ga_metrics_file"
	else
		echo "ERROR! The Google Analytics metrics file '${ga_metrics_file}' was not found!" 1>&2
		success=false
	fi
	if $verbose; then
		if $success; then
			echo "Done."
		else
			echo "ERROR!"
		fi
	fi
	
	$success
}

function save_ga_columns() {
	local success=true
	
	# create the directories, if necessary
	local dimensions_path="$(dirname "$ga_dimensions_file")"
	local metrics_path="$(dirname "$ga_metrics_file")"
	if [ ! -d "$dimensions_path" ]; then
		if $verbose; then echo -n "Creating '$dimensions_path'... "; fi
		mkdir -p "$dimensions_path"
		if [[ $? -gt 0 ]]; then
			echo "ERROR! An unknown error occurred while creating '$dimensions_path'!" 1>&2
			success=false
		else
			if $verbose; then echo "Done."; fi
		fi
	fi
	if [ ! -d "$metrics_path" ]; then
		if $verbose; then echo -n "Creating '$metrics_path'... "; fi
		mkdir -p "$metrics_path"
		if [[ $? -gt 0 ]]; then
			echo "ERROR! An unknown error occurred while creating '$metrics_path'!" 1>&2
			success=false
		else
			if $verbose; then echo "Done."; fi
		fi
	fi
	
	# are the dimensions or metrics arrays empty?
	if [[ ( "${#ga_dimensions[@]}" < 1 ) || ( "${#ga_metrics[@]}" < 1 ) ]]; then
		echo "ERROR! Can't save an empty dimensions or metrics lists!" 1>&2
	else
		# delete the existing dimensions & metrics files, if necessary
		if [ -f "$ga_dimensions_file" ]; then
			if $verbose; then echo -n "Removing old Google Analytics dimensions file '$ga_dimensions_file'... "; fi
			rm "$ga_dimensions_file"
			if $verbose; then echo "Done."; fi
		fi
		if [ -f "$ga_metrics_file" ]; then
			if $verbose; then echo -n "Removing old Google Analytics metrics file '$ga_metrics_file'... "; fi
			rm "$ga_metrics_file"
			if $verbose; then echo "Done."; fi
		fi
		
		# save the dimensions
		if $verbose; then echo -n "Saving Google Analytics dimensions to '$ga_dimensions_file'... "; fi
		local dimension=''
		for dimension in "${ga_dimensions[@]}"; do
			echo "$dimension"
		done >  "$ga_dimensions_file"
		if [[ $? -gt 0 ]]; then
			echo "ERROR! An unknown error occurred while saving the Google Analytics dimensions to '${ga_dimensions_file}'!" 1>&2
			success=false
		else
			if $verbose; then echo "Done."; fi
		fi
		
		# save the metrics
		if $verbose; then echo -n "Saving Google Analytics metrics to '$ga_metrics_file'... "; fi
		local metrics=''
		for metric in "${ga_metrics[@]}"; do
			echo "$metric"
		done >  "$ga_metrics_file"
		if [[ $? -gt 0 ]]; then
			echo "ERROR! An unknown error occurred while saving the Google Analytics metrics to '${ga_metrics_file}'!" 1>&2
			success=false
		else
			if $verbose; then echo "Done."; fi
		fi
	fi
	
	$success
}

function fetch_ga_columns() {
	local success=true
	local columns_json=''
	
	# can we load from the local saved cache or do we need to fetch from Google?
	local load_from_cache=true
	local today_seconds="$(date -j -f "%H:%M:%S" "+%s" "00:00:00")"
	local dimension_file_mtime="$(stat -f "%c" "$ga_dimensions_file" 2>/dev/null)"
	if [[ ( $? -gt 0 ) || ( "$dimension_file_mtime" -lt "$today_seconds" ) ]]; then
		load_from_cache=false
	fi
	local metrics_file_mtime="$(stat -f "%c" "$ga_metrics_file" 2>/dev/null)"
	if [[ ( $? -gt 0 ) || ( "metrics_file_mtime" -lt "$today_seconds" ) ]]; then
		load_from_cache=false
	fi
	
	# load from our cache
	if $load_from_cache; then
		if ! load_ga_columns; then
			success=false
		fi
	# otherwise fetch from google
	else
		if $verbose; then echo -n "Fetching Google Analytics columns... "; fi
		
		# fetch the columns
		columns_json="$(curl -s "https://www.googleapis.com/analytics/v3/metadata/ga/columns?prettyprint=true&key=$api_key")"
		if [ $? -gt 0 ]; then
			echo "ERROR! An unknown error occurred while fetching Google Analytics columns!" 1>&2
			success=false
		else
			local column_id=''
			local column_type=''
			local column_data_type=''
			local column_ui_name=''
			local line=''
			local i=0
			# parse the columns into the ga_dimensions & ga_metrics arrays (format: a pipe-delimited string of "<column_name>|<descriptive_name>|<value_type>")
			while IFS= read -r line; do
				# get the item ID
				if [[ "$line" =~ ^\[\"items\",([0-9]+),\"id\"\]\	\"(.+)\" ]]; then
					if [ "${BASH_REMATCH[1]}" -gt "$i" ]; then
						# save the column to the dimensions or metrics arrays
						#if $verbose; then echo "${column_type}: ${column_id}|${column_ui_name}|${column_data_type}";fi
						case "$column_type" in
							"DIMENSION")
								ga_dimensions+=("${column_id}|${column_ui_name}|${column_data_type}")
								;;
							"METRIC")
								ga_metrics+=("${column_id}|${column_ui_name}|${column_data_type}")
								;;
						esac
						
						# reset the column variables
						column_id=''
						column_type=''
						column_data_type=''
						column_ui_name=''
						
						# update the column number counter
						i="${BASH_REMATCH[1]}"
					fi
					
					# set the new column ID
					column_id="${BASH_REMATCH[2]}"
				# get the item type
				elif [[ "$line" =~ ^\[\"items\",[0-9]+,\"attributes\",\"type\"\]\	\"(.+)\" ]]; then
					column_type="${BASH_REMATCH[1]}"
				# get the data type
				elif [[ "$line" =~ ^\[\"items\",[0-9]+,\"attributes\",\"dataType\"\]\	\"(.+)\" ]]; then
					column_data_type="${BASH_REMATCH[1]}"
				elif [[ "$line" =~ ^\[\"items\",[0-9]+,\"attributes\",\"uiName\"\]\	\"(.+)\" ]]; then
					column_ui_name="${BASH_REMATCH[1]}"
				fi
			done <<< "$(echo -e "$columns_json" | ./JSON.sh)"
			if $verbose; then echo "Done."; fi
			
			# cache the columns locally to improve performance
			if ! save_ga_columns; then
				success=false
			fi
		fi
	fi
	
	$success
}

function fetch_ga_report() {
	local success=true
	local profile="$1"
	local start="$2"
	local end="$3"
	local dimensions="$4"
	local metrics="$5"
	local sort="$6"
	
	if $verbose; then echo -n "Running report on profile $profile between $start & $end for dimension(s) '$dimensions' and metric(s) '$metrics'... "; fi
	
	# build the report URL
	#local feed="https://www.googleapis.com/analytics/v2.4/data\
	local feed="https://www.googleapis.com/analytics/v3/data/ga\
?start-date=$start\
&end-date=$end\
&dimensions=$dimensions\
&metrics=$metrics\
&max-results=10000\
&ids=ga:$profile\
&prettyPrint=true"
	if [ ! -z "$sort" ]; then
		feed="{$feed}&sort=$sort"
	fi
	
	# run the report
	local report_json="$(curl "$feed" -s --header "Authorization: GoogleLogin auth=$auth_token" --header "GData-Version: 2")"
	if [ $? -gt 0 ]; then
		echo "ERROR! An unknown error occurred while running report!" 1>&2
		success=false
	else
		if $verbose; then echo "Done."; fi
		
		# parse the json and output TSV (tab separated values)
		local columns=()
		local row_num=-1
		while IFS= read -r line; do
			# get the column headers
			if [[ "$line" =~ ^\[\"columnHeaders\",([0-9]+),\"name\"\]\	\"(.+)\" ]]; then
				columns+=("${BASH_REMATCH[2]}")
			# get the rows
			elif [[ "$line" =~ ^\[\"rows\",([0-9]+),[0-9]+\]\	\"(.+)\" ]]; then
				# have we just transitioned to a new row?
				if [ "$row_num" -lt "${BASH_REMATCH[1]}" ]; then
					# print the previous row columns (tab separated)
					local column=''
					for column in "${columns[@]}"; do
						echo -n "$column"$'\t'
					done
					echo
					
					# reset the columns array & row counter
					columns=()
					row_num="${BASH_REMATCH[1]}"
				fi
				
				# add the new column value
				columns+=("${BASH_REMATCH[2]}")
			fi
		done <<< "$(echo -e "$report_json" | ./JSON.sh)"
		# print the final row
		for column in "${columns[@]}"; do
			echo -n "$column"$'\t'
		done
		echo
	fi
	
	$success
}

function auth() {
	local success=true
	local email=''
	local password=''
	
	# prompt for email address & password to fetch auth file
	echo "Please log into your Google Analytics account to fetch an auth token:"
	read -p 'Email: ' email
	read -sp 'Password: ' password
	echo -n $'\n'"Fetching auth token from Google Analytics... "
	
	# fetch the token & save
	if get_ga_auth_token "$email" "$password"; then
		echo "Done."
		save_ga_auth_token
	else
		echo "ERROR!"
	fi
	
	$success
}

# see if any arguments were passed in
if [ $# -gt 0 ]; then
	# if so, step through them all and pre-process them (we do this so we can 
	# support multiple options specified together, e.g.: -abc vs. -a -b -c),
	# GNU-style long options with alternate style values, and for easier
	# actual handling
	argv=()
	while [ $# -gt 0 ]; do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${1:0:1}" = "-" ]; then
			# is it a GNU-style long option (e.g. starts with a double-dash)?
			if [ "${1:0:2}" = "--" ]; then
				# push the option (everything before an equals) onto argv
				argv=("${argv[@]}" "${1%%=*}")

				# is it the alternate "--long-opt=value" format? if so, make it
				# "--long-opt value" format buy pushing the value (everything after the
				# equals) on as a separate argument
				case "$1" in *=*)
					argv=("${argv[@]}" "${1##*=}") ;;
				esac
			# otherwise, is it multiple single options specified together?
			elif [ ${#1} -gt 2 ]; then
				tmp="$1"
				# push each onto argv as single options
				for (( i=1; i < ${#tmp}; i++ )); do
					argv=("${argv[@]}" "-${tmp:$i:1}")
				done
			# otherwise, it must be a single option so just push it onto argv
			else
				argv=("${argv[@]}" "$1")
			fi
			shift
		# arguments just get pushed onto argv in order too
		else
			argv=("${argv[@]}" "$1")
			shift
		fi
	done
	argc=${#argv[@]}

	# now that we've pre-processed the options, go through them all for real
	for (( i=0; i<argc; i++ )); do
		# is this an option (e.g. starts with a dash) or an argument?
		if [ "${argv[$i]:0:1}" = "-" ]; then
			case "${argv[$i]}" in
				# see if the user intended us to run in verbose mode
				"-v" | "--verbose")
					verbose=true
					;;
				# see if the user requested help
				"-h" | "--help")
					usage
					exit
					;;
				# see if the user requested the version
				"-V" | "--version")
					version
					exit
					;;
				# see if the user requested to sort the report data
				"--sort")
					report_sort="${argv[$i+1]}"
					(( i++ ))
					;;
				# handle other options

				# unknown option
				*)
					echo "$tool: Unknown option '$1'!"
					exit 1
					;;
			esac
		# handle commands & arguments
		else
			case "${argv[$i]}" in
				# handle other arguments here
				# did the user request to authenticate and generate an auth token?
				"auth")
					command="auth"
					;;
				# did the user request to generate a report?
				"report")
					command="report"
					
					# load the auth token
					if ! load_ga_auth_token; then
						exit 1
					fi
					# fetch columns
					if ! fetch_ga_columns; then
						exit 1
					fi
					;;
				# did the user specify a number (we'll assume it's a profile ID)
				+([0-9]))
					if [[ "$command" = "report" ]]; then
						report_profile="${argv[$i]}"
					else
						echo "ERROR! Unexpected Profile ID '${argv[$i]}'!" 1>&2
						exit 1
					fi
					;;
				# did the user specify a date range (YYYY-MM-DD-YYYY-MM-DD)
				+([0-9])-+([0-9])-+([0-9]))
					if [[ "$command" = "report" ]]; then
						if [[ -z "$report_start_date" ]]; then
							report_start_date="${argv[$i]}"
						elif [[ -z "$report_end_date" ]]; then
							report_end_date="${argv[$i]}"
						else
							echo "ERROR! Unexpected date '${argv[$i]}'!" 1>&2
							exit 1
						fi
					else
						echo "ERROR! Unexpected date '${argv[$i]}'!" 1>&2
						exit 1
					fi
					;;
				# did the user specify a dimension or metric?
				ga:*)
					if [[ "$command" = "report" ]]; then
						if is_ga_dimension "${argv[$i]}"; then
							report_dimensions+=("${argv[$i]}")
						elif is_ga_metric "${argv[$i]}"; then
							report_metrics+=("${argv[$i]}")
						else
							echo "ERROR! Invalid dimension or metric '${argv[$i]}'!" 1>&2
							exit 1
						fi
					else
						echo "ERROR! Unexpected dimension or metric '${argv[$i]}'!" 1>&2
						exit 1
					fi
					
					;;
				
				# unknown command/argument
				*)
					echo "$tool: Unknown command '$1'!"
					exit 1
					;;
			esac
		fi
	done
	
	# run the any applicable commands that were parsed
	case "$command" in
		"auth")
			# authenticate the user
			if ! auth; then
				exit 1
			fi
			;;
		"report")
			# build the list of dimensions & metrics
			IFS=, report_dimensions_list="${report_dimensions[*]}"
			IFS=, report_metrics_list="${report_metrics[*]}"
			
			# run the report
			if ! fetch_ga_report "$report_profile" "$report_start_date" "$report_end_date" "$report_dimensions_list" "$report_metrics_list" "$report_sort"; then
				echo "ERROR!" 1>&2
			fi
			;;
	esac
else
	echo "No options or arguments were specified!"$'\n'
	usage
	exit 1
fi